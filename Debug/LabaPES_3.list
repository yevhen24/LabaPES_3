
LabaPES_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c4  080031c4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031cc  080031cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  20000014  080031e8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fe8  080031e8  00023fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba57  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e0  00000000  00000000  0002ba9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021750  00000000  00000000  0002ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac21  00000000  00000000  00050478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd65d  00000000  00000000  0005b099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001286f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  0012874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003154 	.word	0x08003154

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08003154 	.word	0x08003154

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000030 	.word	0x20000030
 8000538:	20000084 	.word	0x20000084

0800053c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db0c      	blt.n	8000568 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 021f 	and.w	r2, r3, #31
 8000554:	4907      	ldr	r1, [pc, #28]	; (8000574 <__NVIC_ClearPendingIRQ+0x38>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	2001      	movs	r0, #1
 800055e:	fa00 f202 	lsl.w	r2, r0, r2
 8000562:	3360      	adds	r3, #96	; 0x60
 8000564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 faa1 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f837 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8a1 	bl	80006cc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <main+0x64>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fb60 	bl	8001c66 <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <main+0x68>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Task1, "Buttom read", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80005ac:	2300      	movs	r3, #0
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	490a      	ldr	r1, [pc, #40]	; (80005e4 <main+0x6c>)
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x70>)
 80005bc:	f001 fcc4 	bl	8001f48 <xTaskCreate>
  xTaskCreate(Task2, "Leds work", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80005c0:	2300      	movs	r3, #0
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2301      	movs	r3, #1
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	4907      	ldr	r1, [pc, #28]	; (80005ec <main+0x74>)
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x78>)
 80005d0:	f001 fcba 	bl	8001f48 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f001 fb40 	bl	8001c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x60>
 80005da:	bf00      	nop
 80005dc:	08003190 	.word	0x08003190
 80005e0:	20003fe0 	.word	0x20003fe0
 80005e4:	08003178 	.word	0x08003178
 80005e8:	0800079d 	.word	0x0800079d
 80005ec:	08003184 	.word	0x08003184
 80005f0:	08000805 	.word	0x08000805

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2234      	movs	r2, #52	; 0x34
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fd9e 	bl	8003144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a28      	ldr	r2, [pc, #160]	; (80006c4 <SystemClock_Config+0xd0>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd4>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f833 	bl	80016ec <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800068c:	f000 f980 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd85 	bl	80011bc <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006b8:	f000 f96a 	bl	8000990 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a29      	ldr	r2, [pc, #164]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0xc4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2170      	movs	r1, #112	; 0x70
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <MX_GPIO_Init+0xc8>)
 800073c:	f000 fd0c 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4810      	ldr	r0, [pc, #64]	; (8000798 <MX_GPIO_Init+0xcc>)
 8000758:	f000 fb6a 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800075c:	2370      	movs	r3, #112	; 0x70
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000774:	f000 fb5c 	bl	8000e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2105      	movs	r1, #5
 800077c:	2028      	movs	r0, #40	; 0x28
 800077e:	f000 fb12 	bl	8000da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000782:	2028      	movs	r0, #40	; 0x28
 8000784:	f000 fb2b 	bl	8000dde <HAL_NVIC_EnableIRQ>

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020800 	.word	0x40020800

0800079c <Task1>:

/* USER CODE BEGIN 4 */
void Task1 (void *pvParameters)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
			}
			btn = 0;
		}
		osDelay(100);
		*/
		if(flag_irq && (HAL_GetTick() - time_irq) > 200)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <Task1+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0fb      	beq.n	80007a4 <Task1+0x8>
 80007ac:	f000 f9f0 	bl	8000b90 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <Task1+0x5c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2bc8      	cmp	r3, #200	; 0xc8
 80007ba:	d9f3      	bls.n	80007a4 <Task1+0x8>
		{
			__HAL_GPIO_EXTI_CLEAR_IT(BTN1_Pin);
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <Task1+0x60>)
 80007be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c2:	615a      	str	r2, [r3, #20]
			NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80007c4:	2028      	movs	r0, #40	; 0x28
 80007c6:	f7ff feb9 	bl	800053c <__NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ca:	2028      	movs	r0, #40	; 0x28
 80007cc:	f000 fb07 	bl	8000dde <HAL_NVIC_EnableIRQ>

			flag_irq = 0;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <Task1+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
			flag_btn++;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <Task1+0x64>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <Task1+0x64>)
 80007e0:	701a      	strb	r2, [r3, #0]
			if (flag_btn > 7) flag_btn = 0;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <Task1+0x64>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d9dc      	bls.n	80007a4 <Task1+0x8>
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <Task1+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
		if(flag_irq && (HAL_GetTick() - time_irq) > 200)
 80007f0:	e7d8      	b.n	80007a4 <Task1+0x8>
 80007f2:	bf00      	nop
 80007f4:	20000284 	.word	0x20000284
 80007f8:	20000288 	.word	0x20000288
 80007fc:	40013c00 	.word	0x40013c00
 8000800:	20000000 	.word	0x20000000

08000804 <Task2>:
		}
	}
}

void Task2 (void *pvParameters)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		switch(flag_btn)
 800080c:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <Task2+0x13c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b07      	cmp	r3, #7
 8000812:	d8fb      	bhi.n	800080c <Task2+0x8>
 8000814:	a201      	add	r2, pc, #4	; (adr r2, 800081c <Task2+0x18>)
 8000816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081a:	bf00      	nop
 800081c:	0800083d 	.word	0x0800083d
 8000820:	0800085d 	.word	0x0800085d
 8000824:	0800087d 	.word	0x0800087d
 8000828:	0800089d 	.word	0x0800089d
 800082c:	080008bd 	.word	0x080008bd
 8000830:	080008dd 	.word	0x080008dd
 8000834:	080008fd 	.word	0x080008fd
 8000838:	0800091d 	.word	0x0800091d
		{
			case 0:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	4840      	ldr	r0, [pc, #256]	; (8000944 <Task2+0x140>)
 8000842:	f000 fc89 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	483e      	ldr	r0, [pc, #248]	; (8000944 <Task2+0x140>)
 800084c:	f000 fc84 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	483b      	ldr	r0, [pc, #236]	; (8000944 <Task2+0x140>)
 8000856:	f000 fc7f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 800085a:	e06f      	b.n	800093c <Task2+0x138>
			case 1:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2110      	movs	r1, #16
 8000860:	4838      	ldr	r0, [pc, #224]	; (8000944 <Task2+0x140>)
 8000862:	f000 fc79 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	4836      	ldr	r0, [pc, #216]	; (8000944 <Task2+0x140>)
 800086c:	f000 fc74 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4833      	ldr	r0, [pc, #204]	; (8000944 <Task2+0x140>)
 8000876:	f000 fc6f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 800087a:	e05f      	b.n	800093c <Task2+0x138>
			case 2:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4830      	ldr	r0, [pc, #192]	; (8000944 <Task2+0x140>)
 8000882:	f000 fc69 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2120      	movs	r1, #32
 800088a:	482e      	ldr	r0, [pc, #184]	; (8000944 <Task2+0x140>)
 800088c:	f000 fc64 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	482b      	ldr	r0, [pc, #172]	; (8000944 <Task2+0x140>)
 8000896:	f000 fc5f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 800089a:	e04f      	b.n	800093c <Task2+0x138>
			case 3:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	4828      	ldr	r0, [pc, #160]	; (8000944 <Task2+0x140>)
 80008a2:	f000 fc59 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2120      	movs	r1, #32
 80008aa:	4826      	ldr	r0, [pc, #152]	; (8000944 <Task2+0x140>)
 80008ac:	f000 fc54 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	4823      	ldr	r0, [pc, #140]	; (8000944 <Task2+0x140>)
 80008b6:	f000 fc4f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 80008ba:	e03f      	b.n	800093c <Task2+0x138>
			case 4:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2110      	movs	r1, #16
 80008c0:	4820      	ldr	r0, [pc, #128]	; (8000944 <Task2+0x140>)
 80008c2:	f000 fc49 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	481e      	ldr	r0, [pc, #120]	; (8000944 <Task2+0x140>)
 80008cc:	f000 fc44 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	481b      	ldr	r0, [pc, #108]	; (8000944 <Task2+0x140>)
 80008d6:	f000 fc3f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 80008da:	e02f      	b.n	800093c <Task2+0x138>
			case 5:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4818      	ldr	r0, [pc, #96]	; (8000944 <Task2+0x140>)
 80008e2:	f000 fc39 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4816      	ldr	r0, [pc, #88]	; (8000944 <Task2+0x140>)
 80008ec:	f000 fc34 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <Task2+0x140>)
 80008f6:	f000 fc2f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 80008fa:	e01f      	b.n	800093c <Task2+0x138>
			case 6:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <Task2+0x140>)
 8000902:	f000 fc29 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2120      	movs	r1, #32
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <Task2+0x140>)
 800090c:	f000 fc24 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2140      	movs	r1, #64	; 0x40
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <Task2+0x140>)
 8000916:	f000 fc1f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 800091a:	e00f      	b.n	800093c <Task2+0x138>
			case 7:
				HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2110      	movs	r1, #16
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <Task2+0x140>)
 8000922:	f000 fc19 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2120      	movs	r1, #32
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <Task2+0x140>)
 800092c:	f000 fc14 	bl	8001158 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <Task2+0x140>)
 8000936:	f000 fc0f 	bl	8001158 <HAL_GPIO_WritePin>
				break;
 800093a:	bf00      	nop
		switch(flag_btn)
 800093c:	e766      	b.n	800080c <Task2+0x8>
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_GPIO_EXTI_Callback>:
		}
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN1_Pin)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000958:	d10a      	bne.n	8000970 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f000 fa4d 	bl	8000dfa <HAL_NVIC_DisableIRQ>
		flag_irq = 1;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_GPIO_EXTI_Callback+0x30>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
		time_irq = HAL_GetTick();
 8000966:	f000 f913 	bl	8000b90 <HAL_GetTick>
 800096a:	4603      	mov	r3, r0
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_GPIO_EXTI_Callback+0x34>)
 800096e:	6013      	str	r3, [r2, #0]
	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000284 	.word	0x20000284
 800097c:	20000288 	.word	0x20000288

08000980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f001 f9b8 	bl	8001cfe <osDelay>
 800098e:	e7fb      	b.n	8000988 <StartDefaultTask+0x8>

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_MspInit+0x54>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_MspInit+0x54>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f000 f9e0 	bl	8000da6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f8a0 	bl	8000b68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a28:	f001 feec 	bl	8002804 <xTaskGetSchedulerState>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d001      	beq.n	8000a36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a32:	f002 f929 	bl	8002c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a42:	f000 fba3 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f002 fb2d 	bl	80030fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd69 	bl	8000578 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ab4:	080031d4 	.word	0x080031d4
  ldr r2, =_sbss
 8000ab8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000abc:	20003fe8 	.word	0x20003fe8

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f94f 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff ff50 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f975 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f92f 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	20000008 	.word	0x20000008

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	20003fe4 	.word	0x20003fe4

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20003fe4 	.word	0x20003fe4

08000ba8 <__NVIC_SetPriorityGrouping>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_DisableIRQ>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db12      	blt.n	8000c80 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	490a      	ldr	r1, [pc, #40]	; (8000c8c <__NVIC_DisableIRQ+0x44>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	3320      	adds	r3, #32
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c74:	f3bf 8f4f 	dsb	sy
}
 8000c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7a:	f3bf 8f6f 	isb	sy
}
 8000c7e:	bf00      	nop
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff05 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff1a 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff0d 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff1d 	bl	8000c48 <__NVIC_DisableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ff94 	bl	8000d4c <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e165      	b.n	8001118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8154 	bne.w	8001112 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80ae 	beq.w	8001112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a58      	ldr	r2, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x304>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_GPIO_Init+0x30c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x20a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x206>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x320>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x202>
 800102e:	2306      	movs	r3, #6
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001032:	2307      	movs	r3, #7
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x304>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_GPIO_Init+0x324>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_GPIO_Init+0x324>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae96 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fbcc 	bl	8000948 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0cc      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d90c      	bls.n	80011f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0b8      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001210:	4b59      	ldr	r3, [pc, #356]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800121a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001228:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	494d      	ldr	r1, [pc, #308]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d044      	beq.n	80012dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e07f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d003      	beq.n	800127a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001276:	2b03      	cmp	r3, #3
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e067      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4934      	ldr	r1, [pc, #208]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff fc70 	bl	8000b90 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff fc6c 	bl	8000b90 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e04f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d20c      	bcs.n	8001304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e032      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4916      	ldr	r1, [pc, #88]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001342:	f000 f821 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 8001346:	4602      	mov	r2, r0
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	490a      	ldr	r1, [pc, #40]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	5ccb      	ldrb	r3, [r1, r3]
 8001356:	fa22 f303 	lsr.w	r3, r2, r3
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fbd0 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00
 8001378:	40023800 	.word	0x40023800
 800137c:	080031b4 	.word	0x080031b4
 8001380:	20000004 	.word	0x20000004
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800138c:	b088      	sub	sp, #32
 800138e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a4:	4bce      	ldr	r3, [pc, #824]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	f200 818d 	bhi.w	80016cc <HAL_RCC_GetSysClockFreq+0x344>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013ed 	.word	0x080013ed
 80013bc:	080016cd 	.word	0x080016cd
 80013c0:	080016cd 	.word	0x080016cd
 80013c4:	080016cd 	.word	0x080016cd
 80013c8:	080013f3 	.word	0x080013f3
 80013cc:	080016cd 	.word	0x080016cd
 80013d0:	080016cd 	.word	0x080016cd
 80013d4:	080016cd 	.word	0x080016cd
 80013d8:	080013f9 	.word	0x080013f9
 80013dc:	080016cd 	.word	0x080016cd
 80013e0:	080016cd 	.word	0x080016cd
 80013e4:	080016cd 	.word	0x080016cd
 80013e8:	0800156d 	.word	0x0800156d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4bbd      	ldr	r3, [pc, #756]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ee:	61bb      	str	r3, [r7, #24]
       break;
 80013f0:	e16f      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013f2:	4bbd      	ldr	r3, [pc, #756]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x360>)
 80013f4:	61bb      	str	r3, [r7, #24]
      break;
 80013f6:	e16c      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f8:	4bb9      	ldr	r3, [pc, #740]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001400:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001402:	4bb7      	ldr	r3, [pc, #732]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d053      	beq.n	80014b6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140e:	4bb4      	ldr	r3, [pc, #720]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	099b      	lsrs	r3, r3, #6
 8001414:	461a      	mov	r2, r3
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	ea02 0400 	and.w	r4, r2, r0
 8001426:	603c      	str	r4, [r7, #0]
 8001428:	400b      	ands	r3, r1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	014b      	lsls	r3, r1, #5
 800143e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001442:	0142      	lsls	r2, r0, #5
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	4623      	mov	r3, r4
 800144a:	1ac0      	subs	r0, r0, r3
 800144c:	462b      	mov	r3, r5
 800144e:	eb61 0103 	sbc.w	r1, r1, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	018b      	lsls	r3, r1, #6
 800145c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001460:	0182      	lsls	r2, r0, #6
 8001462:	1a12      	subs	r2, r2, r0
 8001464:	eb63 0301 	sbc.w	r3, r3, r1
 8001468:	f04f 0000 	mov.w	r0, #0
 800146c:	f04f 0100 	mov.w	r1, #0
 8001470:	00d9      	lsls	r1, r3, #3
 8001472:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001476:	00d0      	lsls	r0, r2, #3
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4621      	mov	r1, r4
 800147e:	1852      	adds	r2, r2, r1
 8001480:	4629      	mov	r1, r5
 8001482:	eb43 0101 	adc.w	r1, r3, r1
 8001486:	460b      	mov	r3, r1
 8001488:	f04f 0000 	mov.w	r0, #0
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	0259      	lsls	r1, r3, #9
 8001492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001496:	0250      	lsls	r0, r2, #9
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	f7fe feb2 	bl	8000210 <__aeabi_uldivmod>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4613      	mov	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e04c      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b6:	4b8a      	ldr	r3, [pc, #552]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	099b      	lsrs	r3, r3, #6
 80014bc:	461a      	mov	r2, r3
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	ea02 0a00 	and.w	sl, r2, r0
 80014ce:	ea03 0b01 	and.w	fp, r3, r1
 80014d2:	4650      	mov	r0, sl
 80014d4:	4659      	mov	r1, fp
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	014b      	lsls	r3, r1, #5
 80014e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014e4:	0142      	lsls	r2, r0, #5
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	ebb0 000a 	subs.w	r0, r0, sl
 80014ee:	eb61 010b 	sbc.w	r1, r1, fp
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	018b      	lsls	r3, r1, #6
 80014fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001500:	0182      	lsls	r2, r0, #6
 8001502:	1a12      	subs	r2, r2, r0
 8001504:	eb63 0301 	sbc.w	r3, r3, r1
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	00d9      	lsls	r1, r3, #3
 8001512:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001516:	00d0      	lsls	r0, r2, #3
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	eb12 020a 	adds.w	r2, r2, sl
 8001520:	eb43 030b 	adc.w	r3, r3, fp
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	0299      	lsls	r1, r3, #10
 800152e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001532:	0290      	lsls	r0, r2, #10
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	461a      	mov	r2, r3
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f7fe fe64 	bl	8000210 <__aeabi_uldivmod>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4613      	mov	r3, r2
 800154e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001550:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	61bb      	str	r3, [r7, #24]
      break;
 800156a:	e0b2      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156c:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001574:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d04d      	beq.n	800161e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001582:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	099b      	lsrs	r3, r3, #6
 8001588:	461a      	mov	r2, r3
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	ea02 0800 	and.w	r8, r2, r0
 800159a:	ea03 0901 	and.w	r9, r3, r1
 800159e:	4640      	mov	r0, r8
 80015a0:	4649      	mov	r1, r9
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	014b      	lsls	r3, r1, #5
 80015ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015b0:	0142      	lsls	r2, r0, #5
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	ebb0 0008 	subs.w	r0, r0, r8
 80015ba:	eb61 0109 	sbc.w	r1, r1, r9
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015cc:	0182      	lsls	r2, r0, #6
 80015ce:	1a12      	subs	r2, r2, r0
 80015d0:	eb63 0301 	sbc.w	r3, r3, r1
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	f04f 0100 	mov.w	r1, #0
 80015dc:	00d9      	lsls	r1, r3, #3
 80015de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015e2:	00d0      	lsls	r0, r2, #3
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	eb12 0208 	adds.w	r2, r2, r8
 80015ec:	eb43 0309 	adc.w	r3, r3, r9
 80015f0:	f04f 0000 	mov.w	r0, #0
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	0259      	lsls	r1, r3, #9
 80015fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015fe:	0250      	lsls	r0, r2, #9
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	461a      	mov	r2, r3
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	f7fe fdfe 	bl	8000210 <__aeabi_uldivmod>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4613      	mov	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e04a      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	461a      	mov	r2, r3
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	ea02 0400 	and.w	r4, r2, r0
 8001636:	ea03 0501 	and.w	r5, r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	014b      	lsls	r3, r1, #5
 8001648:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800164c:	0142      	lsls	r2, r0, #5
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	1b00      	subs	r0, r0, r4
 8001654:	eb61 0105 	sbc.w	r1, r1, r5
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	018b      	lsls	r3, r1, #6
 8001662:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001666:	0182      	lsls	r2, r0, #6
 8001668:	1a12      	subs	r2, r2, r0
 800166a:	eb63 0301 	sbc.w	r3, r3, r1
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	00d9      	lsls	r1, r3, #3
 8001678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800167c:	00d0      	lsls	r0, r2, #3
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	1912      	adds	r2, r2, r4
 8001684:	eb45 0303 	adc.w	r3, r5, r3
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	0299      	lsls	r1, r3, #10
 8001692:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001696:	0290      	lsls	r0, r2, #10
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f7fe fdb2 	bl	8000210 <__aeabi_uldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4613      	mov	r3, r2
 80016b2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0f1b      	lsrs	r3, r3, #28
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	61bb      	str	r3, [r7, #24]
      break;
 80016ca:	e002      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ce:	61bb      	str	r3, [r7, #24]
      break;
 80016d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d2:	69bb      	ldr	r3, [r7, #24]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	007a1200 	.word	0x007a1200

080016ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e28d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8083 	beq.w	8001812 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800170c:	4b94      	ldr	r3, [pc, #592]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d019      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001718:	4b91      	ldr	r3, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001720:	2b08      	cmp	r3, #8
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001724:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x124>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e25a      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x90>
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7b      	ldr	r2, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xb4>
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6b      	ldr	r2, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f9e6 	bl	8000b90 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff f9e2 	bl	8000b90 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e21f      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xdc>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f9d2 	bl	8000b90 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f9ce 	bl	8000b90 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e20b      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x104>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06f      	beq.n	80018fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d017      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1d3      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f97b 	bl	8000b90 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f977 	bl	8000b90 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1b4      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4925      	ldr	r1, [pc, #148]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f95a 	bl	8000b90 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff f956 	bl	8000b90 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e193      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f93a 	bl	8000b90 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f936 	bl	8000b90 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e173      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x234>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f923 	bl	8000b90 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00e      	b.n	800196c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f91f 	bl	8000b90 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d907      	bls.n	800196c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e15c      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8097 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b7c      	ldr	r3, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f8df 	bl	8000b90 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f8db 	bl	8000b90 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e118      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31e>
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x340>
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f8a0 	bl	8000b90 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f89c 	bl	8000b90 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0d7      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ee      	beq.n	8001a54 <HAL_RCC_OscConfig+0x368>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f88a 	bl	8000b90 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f886 	bl	8000b90 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0c1      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ad 	beq.w	8001c18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d060      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d145      	bne.n	8001b5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f85a 	bl	8000b90 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f856 	bl	8000b90 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e093      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	071b      	lsls	r3, r3, #28
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f82b 	bl	8000b90 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f827 	bl	8000b90 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e064      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x452>
 8001b5c:	e05c      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f814 	bl	8000b90 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f810 	bl	8000b90 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
 8001b8a:	e045      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e040      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x538>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d129      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d119      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	2b84      	cmp	r3, #132	; 0x84
 8001c3c:	d005      	beq.n	8001c4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	3303      	adds	r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c5c:	f000 fade 	bl	800221c <vTaskStartScheduler>
  
  return osOK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c68:	b089      	sub	sp, #36	; 0x24
 8001c6a:	af04      	add	r7, sp, #16
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <osThreadCreate+0x54>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01c      	beq.n	8001cba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685c      	ldr	r4, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681d      	ldr	r5, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691e      	ldr	r6, [r3, #16]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ffc8 	bl	8001c28 <makeFreeRtosPriority>
 8001c98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ca2:	9202      	str	r2, [sp, #8]
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	9100      	str	r1, [sp, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4632      	mov	r2, r6
 8001cac:	4629      	mov	r1, r5
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f000 f8ed 	bl	8001e8e <xTaskCreateStatic>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e01c      	b.n	8001cf4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685c      	ldr	r4, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cc6:	b29e      	uxth	r6, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ffaa 	bl	8001c28 <makeFreeRtosPriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	9200      	str	r2, [sp, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4632      	mov	r2, r6
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f000 f92f 	bl	8001f48 <xTaskCreate>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cfe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <osDelay+0x16>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	e000      	b.n	8001d16 <osDelay+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fa4c 	bl	80021b4 <vTaskDelay>
  
  return osOK;
 8001d1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f103 0208 	add.w	r2, r3, #8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f103 0208 	add.w	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f103 0208 	add.w	r2, r3, #8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dde:	d103      	bne.n	8001de8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e00c      	b.n	8001e02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3308      	adds	r3, #8
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e002      	b.n	8001df6 <vListInsert+0x2e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d2f6      	bcs.n	8001df0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6892      	ldr	r2, [r2, #8]
 8001e50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6852      	ldr	r2, [r2, #4]
 8001e5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d103      	bne.n	8001e6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b08e      	sub	sp, #56	; 0x38
 8001e92:	af04      	add	r7, sp, #16
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea6:	f383 8811 	msr	BASEPRI, r3
 8001eaa:	f3bf 8f6f 	isb	sy
 8001eae:	f3bf 8f4f 	dsb	sy
 8001eb2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001eb4:	bf00      	nop
 8001eb6:	e7fe      	b.n	8001eb6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <xTaskCreateStatic+0x46>
	__asm volatile
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	61fb      	str	r3, [r7, #28]
}
 8001ed0:	bf00      	nop
 8001ed2:	e7fe      	b.n	8001ed2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ed4:	2354      	movs	r3, #84	; 0x54
 8001ed6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b54      	cmp	r3, #84	; 0x54
 8001edc:	d00a      	beq.n	8001ef4 <xTaskCreateStatic+0x66>
	__asm volatile
 8001ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
 8001eee:	61bb      	str	r3, [r7, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	e7fe      	b.n	8001ef2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ef4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <xTaskCreateStatic+0xac>
 8001efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01b      	beq.n	8001f3a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f14:	2300      	movs	r3, #0
 8001f16:	9303      	str	r3, [sp, #12]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f850 	bl	8001fd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f34:	f000 f8d4 	bl	80020e0 <prvAddNewTaskToReadyList>
 8001f38:	e001      	b.n	8001f3e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001f3e:	697b      	ldr	r3, [r7, #20]
	}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af04      	add	r7, sp, #16
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fee3 	bl	8002d28 <pvPortMalloc>
 8001f62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f6a:	2054      	movs	r0, #84	; 0x54
 8001f6c:	f000 fedc 	bl	8002d28 <pvPortMalloc>
 8001f70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f7e:	e005      	b.n	8001f8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f80:	6978      	ldr	r0, [r7, #20]
 8001f82:	f000 ff9d 	bl	8002ec0 <vPortFree>
 8001f86:	e001      	b.n	8001f8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d017      	beq.n	8001fc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f9a:	88fa      	ldrh	r2, [r7, #6]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	9302      	str	r3, [sp, #8]
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f80e 	bl	8001fd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fb6:	69f8      	ldr	r0, [r7, #28]
 8001fb8:	f000 f892 	bl	80020e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e002      	b.n	8001fc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
	}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b088      	sub	sp, #32
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fea:	3b01      	subs	r3, #1
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f023 0307 	bic.w	r3, r3, #7
 8001ff8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <prvInitialiseNewTask+0x48>
	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	617b      	str	r3, [r7, #20]
}
 8002016:	bf00      	nop
 8002018:	e7fe      	b.n	8002018 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01f      	beq.n	8002060 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e012      	b.n	800204c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	3334      	adds	r3, #52	; 0x34
 8002036:	460a      	mov	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	d9e9      	bls.n	8002026 <prvInitialiseNewTask+0x54>
 8002052:	e000      	b.n	8002056 <prvInitialiseNewTask+0x84>
			{
				break;
 8002054:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800205e:	e003      	b.n	8002068 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	2b06      	cmp	r3, #6
 800206c:	d901      	bls.n	8002072 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800206e:	2306      	movs	r3, #6
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2200      	movs	r2, #0
 8002082:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	3304      	adds	r3, #4
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fe6c 	bl	8001d66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	3318      	adds	r3, #24
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe67 	bl	8001d66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	f1c3 0207 	rsb	r2, r3, #7
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	2200      	movs	r2, #0
 80020b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	69b8      	ldr	r0, [r7, #24]
 80020c2:	f000 fc23 	bl	800290c <pxPortInitialiseStack>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020e8:	f000 fd3c 	bl	8002b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <prvAddNewTaskToReadyList+0xb8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a29      	ldr	r2, [pc, #164]	; (8002198 <prvAddNewTaskToReadyList+0xb8>)
 80020f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <prvAddNewTaskToReadyList+0xbc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020fe:	4a27      	ldr	r2, [pc, #156]	; (800219c <prvAddNewTaskToReadyList+0xbc>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <prvAddNewTaskToReadyList+0xb8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d110      	bne.n	800212e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800210c:	f000 fabc 	bl	8002688 <prvInitialiseTaskLists>
 8002110:	e00d      	b.n	800212e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <prvAddNewTaskToReadyList+0xc0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <prvAddNewTaskToReadyList+0xbc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	429a      	cmp	r2, r3
 8002126:	d802      	bhi.n	800212e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <prvAddNewTaskToReadyList+0xbc>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <prvAddNewTaskToReadyList+0xc4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <prvAddNewTaskToReadyList+0xc4>)
 8002136:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	2201      	movs	r2, #1
 800213e:	409a      	lsls	r2, r3
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4a15      	ldr	r2, [pc, #84]	; (80021ac <prvAddNewTaskToReadyList+0xcc>)
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4610      	mov	r0, r2
 8002162:	f7ff fe0d 	bl	8001d80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002166:	f000 fd2d 	bl	8002bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <prvAddNewTaskToReadyList+0xc0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00e      	beq.n	8002190 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <prvAddNewTaskToReadyList+0xbc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <prvAddNewTaskToReadyList+0xd0>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000038c 	.word	0x2000038c
 800219c:	2000028c 	.word	0x2000028c
 80021a0:	20000398 	.word	0x20000398
 80021a4:	200003a8 	.word	0x200003a8
 80021a8:	20000394 	.word	0x20000394
 80021ac:	20000290 	.word	0x20000290
 80021b0:	e000ed04 	.word	0xe000ed04

080021b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d017      	beq.n	80021f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <vTaskDelay+0x60>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <vTaskDelay+0x30>
	__asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	60bb      	str	r3, [r7, #8]
}
 80021e0:	bf00      	nop
 80021e2:	e7fe      	b.n	80021e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80021e4:	f000 f87a 	bl	80022dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fb28 	bl	8002840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021f0:	f000 f882 	bl	80022f8 <xTaskResumeAll>
 80021f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <vTaskDelay+0x64>)
 80021fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200003b4 	.word	0x200003b4
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800222a:	463a      	mov	r2, r7
 800222c:	1d39      	adds	r1, r7, #4
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f968 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	9202      	str	r2, [sp, #8]
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2300      	movs	r3, #0
 8002248:	460a      	mov	r2, r1
 800224a:	491e      	ldr	r1, [pc, #120]	; (80022c4 <vTaskStartScheduler+0xa8>)
 800224c:	481e      	ldr	r0, [pc, #120]	; (80022c8 <vTaskStartScheduler+0xac>)
 800224e:	f7ff fe1e 	bl	8001e8e <xTaskCreateStatic>
 8002252:	4603      	mov	r3, r0
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <vTaskStartScheduler+0xb0>)
 8002256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <vTaskStartScheduler+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e001      	b.n	800226a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d116      	bne.n	800229e <vTaskStartScheduler+0x82>
	__asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	613b      	str	r3, [r7, #16]
}
 8002282:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <vTaskStartScheduler+0xb4>)
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <vTaskStartScheduler+0xb8>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <vTaskStartScheduler+0xbc>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002298:	f000 fbc2 	bl	8002a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800229c:	e00e      	b.n	80022bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d10a      	bne.n	80022bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	60fb      	str	r3, [r7, #12]
}
 80022b8:	bf00      	nop
 80022ba:	e7fe      	b.n	80022ba <vTaskStartScheduler+0x9e>
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	080031ac 	.word	0x080031ac
 80022c8:	08002659 	.word	0x08002659
 80022cc:	200003b0 	.word	0x200003b0
 80022d0:	200003ac 	.word	0x200003ac
 80022d4:	20000398 	.word	0x20000398
 80022d8:	20000390 	.word	0x20000390

080022dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <vTaskSuspendAll+0x18>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <vTaskSuspendAll+0x18>)
 80022e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	200003b4 	.word	0x200003b4

080022f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <xTaskResumeAll+0x114>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <xTaskResumeAll+0x2c>
	__asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	603b      	str	r3, [r7, #0]
}
 8002320:	bf00      	nop
 8002322:	e7fe      	b.n	8002322 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002324:	f000 fc1e 	bl	8002b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002328:	4b38      	ldr	r3, [pc, #224]	; (800240c <xTaskResumeAll+0x114>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3b01      	subs	r3, #1
 800232e:	4a37      	ldr	r2, [pc, #220]	; (800240c <xTaskResumeAll+0x114>)
 8002330:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <xTaskResumeAll+0x114>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d161      	bne.n	80023fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800233a:	4b35      	ldr	r3, [pc, #212]	; (8002410 <xTaskResumeAll+0x118>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d05d      	beq.n	80023fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002342:	e02e      	b.n	80023a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <xTaskResumeAll+0x11c>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3318      	adds	r3, #24
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fd72 	bl	8001e3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3304      	adds	r3, #4
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fd6d 	bl	8001e3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2201      	movs	r2, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <xTaskResumeAll+0x120>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4313      	orrs	r3, r2
 800236e:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <xTaskResumeAll+0x120>)
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4a27      	ldr	r2, [pc, #156]	; (800241c <xTaskResumeAll+0x124>)
 8002380:	441a      	add	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3304      	adds	r3, #4
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7ff fcf9 	bl	8001d80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <xTaskResumeAll+0x128>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	429a      	cmp	r2, r3
 800239a:	d302      	bcc.n	80023a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <xTaskResumeAll+0x12c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <xTaskResumeAll+0x11c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1cc      	bne.n	8002344 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023b0:	f000 fa08 	bl	80027c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <xTaskResumeAll+0x130>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023c0:	f000 f836 	bl	8002430 <xTaskIncrementTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <xTaskResumeAll+0x12c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f1      	bne.n	80023c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <xTaskResumeAll+0x130>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <xTaskResumeAll+0x12c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <xTaskResumeAll+0x134>)
 80023f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023fe:	f000 fbe1 	bl	8002bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8002402:	68bb      	ldr	r3, [r7, #8]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200003b4 	.word	0x200003b4
 8002410:	2000038c 	.word	0x2000038c
 8002414:	2000034c 	.word	0x2000034c
 8002418:	20000394 	.word	0x20000394
 800241c:	20000290 	.word	0x20000290
 8002420:	2000028c 	.word	0x2000028c
 8002424:	200003a0 	.word	0x200003a0
 8002428:	2000039c 	.word	0x2000039c
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800243a:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <xTaskIncrementTick+0x144>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 808e 	bne.w	8002560 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <xTaskIncrementTick+0x148>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800244c:	4a4a      	ldr	r2, [pc, #296]	; (8002578 <xTaskIncrementTick+0x148>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d120      	bne.n	800249a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002458:	4b48      	ldr	r3, [pc, #288]	; (800257c <xTaskIncrementTick+0x14c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <xTaskIncrementTick+0x48>
	__asm volatile
 8002462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	603b      	str	r3, [r7, #0]
}
 8002474:	bf00      	nop
 8002476:	e7fe      	b.n	8002476 <xTaskIncrementTick+0x46>
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <xTaskIncrementTick+0x14c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <xTaskIncrementTick+0x150>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3e      	ldr	r2, [pc, #248]	; (800257c <xTaskIncrementTick+0x14c>)
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4a3e      	ldr	r2, [pc, #248]	; (8002580 <xTaskIncrementTick+0x150>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <xTaskIncrementTick+0x154>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	4a3c      	ldr	r2, [pc, #240]	; (8002584 <xTaskIncrementTick+0x154>)
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	f000 f995 	bl	80027c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <xTaskIncrementTick+0x158>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d348      	bcc.n	8002536 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <xTaskIncrementTick+0x14c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <xTaskIncrementTick+0x158>)
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	601a      	str	r2, [r3, #0]
					break;
 80024b6:	e03e      	b.n	8002536 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <xTaskIncrementTick+0x14c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d203      	bcs.n	80024d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80024d0:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <xTaskIncrementTick+0x158>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80024d6:	e02e      	b.n	8002536 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3304      	adds	r3, #4
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fcac 	bl	8001e3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3318      	adds	r3, #24
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fca3 	bl	8001e3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2201      	movs	r2, #1
 80024fa:	409a      	lsls	r2, r3
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <xTaskIncrementTick+0x15c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	4a22      	ldr	r2, [pc, #136]	; (800258c <xTaskIncrementTick+0x15c>)
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <xTaskIncrementTick+0x160>)
 8002514:	441a      	add	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3304      	adds	r3, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f7ff fc2f 	bl	8001d80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <xTaskIncrementTick+0x164>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	429a      	cmp	r2, r3
 800252e:	d3b9      	bcc.n	80024a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002530:	2301      	movs	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002534:	e7b6      	b.n	80024a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <xTaskIncrementTick+0x164>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	4914      	ldr	r1, [pc, #80]	; (8002590 <xTaskIncrementTick+0x160>)
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d901      	bls.n	8002552 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800254e:	2301      	movs	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <xTaskIncrementTick+0x168>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e004      	b.n	800256a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <xTaskIncrementTick+0x16c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a0d      	ldr	r2, [pc, #52]	; (800259c <xTaskIncrementTick+0x16c>)
 8002568:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800256a:	697b      	ldr	r3, [r7, #20]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200003b4 	.word	0x200003b4
 8002578:	20000390 	.word	0x20000390
 800257c:	20000344 	.word	0x20000344
 8002580:	20000348 	.word	0x20000348
 8002584:	200003a4 	.word	0x200003a4
 8002588:	200003ac 	.word	0x200003ac
 800258c:	20000394 	.word	0x20000394
 8002590:	20000290 	.word	0x20000290
 8002594:	2000028c 	.word	0x2000028c
 8002598:	200003a0 	.word	0x200003a0
 800259c:	2000039c 	.word	0x2000039c

080025a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <vTaskSwitchContext+0xa4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <vTaskSwitchContext+0xa8>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025b4:	e03f      	b.n	8002636 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <vTaskSwitchContext+0xa8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <vTaskSwitchContext+0xac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	f1c3 031f 	rsb	r3, r3, #31
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	491f      	ldr	r1, [pc, #124]	; (8002650 <vTaskSwitchContext+0xb0>)
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	607b      	str	r3, [r7, #4]
}
 80025f8:	bf00      	nop
 80025fa:	e7fe      	b.n	80025fa <vTaskSwitchContext+0x5a>
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <vTaskSwitchContext+0xb0>)
 8002608:	4413      	add	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	3308      	adds	r3, #8
 800261e:	429a      	cmp	r2, r3
 8002620:	d104      	bne.n	800262c <vTaskSwitchContext+0x8c>
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <vTaskSwitchContext+0xb4>)
 8002634:	6013      	str	r3, [r2, #0]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	200003b4 	.word	0x200003b4
 8002648:	200003a0 	.word	0x200003a0
 800264c:	20000394 	.word	0x20000394
 8002650:	20000290 	.word	0x20000290
 8002654:	2000028c 	.word	0x2000028c

08002658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002660:	f000 f852 	bl	8002708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <prvIdleTask+0x28>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d9f9      	bls.n	8002660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <prvIdleTask+0x2c>)
 800266e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800267c:	e7f0      	b.n	8002660 <prvIdleTask+0x8>
 800267e:	bf00      	nop
 8002680:	20000290 	.word	0x20000290
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	e00c      	b.n	80026ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <prvInitialiseTaskLists+0x60>)
 80026a0:	4413      	add	r3, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fb3f 	bl	8001d26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3301      	adds	r3, #1
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d9ef      	bls.n	8002694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <prvInitialiseTaskLists+0x64>)
 80026b6:	f7ff fb36 	bl	8001d26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <prvInitialiseTaskLists+0x68>)
 80026bc:	f7ff fb33 	bl	8001d26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <prvInitialiseTaskLists+0x6c>)
 80026c2:	f7ff fb30 	bl	8001d26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80026c6:	480c      	ldr	r0, [pc, #48]	; (80026f8 <prvInitialiseTaskLists+0x70>)
 80026c8:	f7ff fb2d 	bl	8001d26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80026cc:	480b      	ldr	r0, [pc, #44]	; (80026fc <prvInitialiseTaskLists+0x74>)
 80026ce:	f7ff fb2a 	bl	8001d26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <prvInitialiseTaskLists+0x78>)
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <prvInitialiseTaskLists+0x64>)
 80026d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <prvInitialiseTaskLists+0x7c>)
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <prvInitialiseTaskLists+0x68>)
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000290 	.word	0x20000290
 80026ec:	2000031c 	.word	0x2000031c
 80026f0:	20000330 	.word	0x20000330
 80026f4:	2000034c 	.word	0x2000034c
 80026f8:	20000360 	.word	0x20000360
 80026fc:	20000378 	.word	0x20000378
 8002700:	20000344 	.word	0x20000344
 8002704:	20000348 	.word	0x20000348

08002708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800270e:	e019      	b.n	8002744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002710:	f000 fa28 	bl	8002b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <prvCheckTasksWaitingTermination+0x50>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fb8a 	bl	8001e3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <prvCheckTasksWaitingTermination+0x54>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	4a0b      	ldr	r2, [pc, #44]	; (800275c <prvCheckTasksWaitingTermination+0x54>)
 800272e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <prvCheckTasksWaitingTermination+0x58>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <prvCheckTasksWaitingTermination+0x58>)
 8002738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800273a:	f000 fa43 	bl	8002bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f810 	bl	8002764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <prvCheckTasksWaitingTermination+0x58>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e1      	bne.n	8002710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000360 	.word	0x20000360
 800275c:	2000038c 	.word	0x2000038c
 8002760:	20000374 	.word	0x20000374

08002764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002772:	2b00      	cmp	r3, #0
 8002774:	d108      	bne.n	8002788 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fba0 	bl	8002ec0 <vPortFree>
				vPortFree( pxTCB );
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fb9d 	bl	8002ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002786:	e018      	b.n	80027ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278e:	2b01      	cmp	r3, #1
 8002790:	d103      	bne.n	800279a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fb94 	bl	8002ec0 <vPortFree>
	}
 8002798:	e00f      	b.n	80027ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d00a      	beq.n	80027ba <prvDeleteTCB+0x56>
	__asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	60fb      	str	r3, [r7, #12]
}
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <prvDeleteTCB+0x54>
	}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <prvResetNextTaskUnblockTime+0x38>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <prvResetNextTaskUnblockTime+0x3c>)
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295
 80027da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80027dc:	e008      	b.n	80027f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <prvResetNextTaskUnblockTime+0x38>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <prvResetNextTaskUnblockTime+0x3c>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	20000344 	.word	0x20000344
 8002800:	200003ac 	.word	0x200003ac

08002804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <xTaskGetSchedulerState+0x34>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002812:	2301      	movs	r3, #1
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	e008      	b.n	800282a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <xTaskGetSchedulerState+0x38>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002820:	2302      	movs	r3, #2
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	e001      	b.n	800282a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800282a:	687b      	ldr	r3, [r7, #4]
	}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	20000398 	.word	0x20000398
 800283c:	200003b4 	.word	0x200003b4

08002840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3304      	adds	r3, #4
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff faef 	bl	8001e3a <uxListRemove>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	2201      	movs	r2, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4013      	ands	r3, r2
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002878:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d10a      	bne.n	8002898 <prvAddCurrentTaskToDelayedList+0x58>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3304      	adds	r3, #4
 800288e:	4619      	mov	r1, r3
 8002890:	481a      	ldr	r0, [pc, #104]	; (80028fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002892:	f7ff fa75 	bl	8001d80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002896:	e026      	b.n	80028e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d209      	bcs.n	80028c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <prvAddCurrentTaskToDelayedList+0xc0>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7ff fa83 	bl	8001dc8 <vListInsert>
}
 80028c2:	e010      	b.n	80028e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3304      	adds	r3, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7ff fa79 	bl	8001dc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d202      	bcs.n	80028e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80028e0:	4a09      	ldr	r2, [pc, #36]	; (8002908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6013      	str	r3, [r2, #0]
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000390 	.word	0x20000390
 80028f4:	2000028c 	.word	0x2000028c
 80028f8:	20000394 	.word	0x20000394
 80028fc:	20000378 	.word	0x20000378
 8002900:	20000348 	.word	0x20000348
 8002904:	20000344 	.word	0x20000344
 8002908:	200003ac 	.word	0x200003ac

0800290c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b04      	subs	r3, #4
 800291c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b04      	subs	r3, #4
 800292a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f023 0201 	bic.w	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3b04      	subs	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800293c:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <pxPortInitialiseStack+0x64>)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b14      	subs	r3, #20
 8002946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3b04      	subs	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f06f 0202 	mvn.w	r2, #2
 800295a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3b20      	subs	r3, #32
 8002960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	08002975 	.word	0x08002975

08002974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <prvTaskExitError+0x54>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d00a      	beq.n	800299e <prvTaskExitError+0x2a>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	60fb      	str	r3, [r7, #12]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <prvTaskExitError+0x28>
	__asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	60bb      	str	r3, [r7, #8]
}
 80029b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80029b2:	bf00      	nop
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0fc      	beq.n	80029b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20000010 	.word	0x20000010
 80029cc:	00000000 	.word	0x00000000

080029d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <pxCurrentTCBConst2>)
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	6808      	ldr	r0, [r1, #0]
 80029d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029da:	f380 8809 	msr	PSP, r0
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f380 8811 	msr	BASEPRI, r0
 80029ea:	4770      	bx	lr
 80029ec:	f3af 8000 	nop.w

080029f0 <pxCurrentTCBConst2>:
 80029f0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop

080029f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80029f8:	4808      	ldr	r0, [pc, #32]	; (8002a1c <prvPortStartFirstTask+0x24>)
 80029fa:	6800      	ldr	r0, [r0, #0]
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f380 8808 	msr	MSP, r0
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f380 8814 	msr	CONTROL, r0
 8002a0a:	b662      	cpsie	i
 8002a0c:	b661      	cpsie	f
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	df00      	svc	0
 8002a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a1a:	bf00      	nop
 8002a1c:	e000ed08 	.word	0xe000ed08

08002a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <xPortStartScheduler+0x120>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a46      	ldr	r2, [pc, #280]	; (8002b44 <xPortStartScheduler+0x124>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10a      	bne.n	8002a46 <xPortStartScheduler+0x26>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	613b      	str	r3, [r7, #16]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <xPortStartScheduler+0x120>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <xPortStartScheduler+0x128>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10a      	bne.n	8002a66 <xPortStartScheduler+0x46>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	60fb      	str	r3, [r7, #12]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <xPortStartScheduler+0x12c>)
 8002a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	22ff      	movs	r2, #255	; 0xff
 8002a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <xPortStartScheduler+0x130>)
 8002a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <xPortStartScheduler+0x134>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a94:	e009      	b.n	8002aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <xPortStartScheduler+0x134>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <xPortStartScheduler+0x134>)
 8002a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d0ef      	beq.n	8002a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00a      	beq.n	8002ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	60bb      	str	r3, [r7, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <xPortStartScheduler+0x134>)
 8002aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <xPortStartScheduler+0x138>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <xPortStartScheduler+0x138>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <xPortStartScheduler+0x138>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <xPortStartScheduler+0x138>)
 8002b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b0e:	f000 f8dd 	bl	8002ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <xPortStartScheduler+0x13c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002b18:	f000 f8fc 	bl	8002d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <xPortStartScheduler+0x140>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <xPortStartScheduler+0x140>)
 8002b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002b28:	f7ff ff66 	bl	80029f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b2c:	f7ff fd38 	bl	80025a0 <vTaskSwitchContext>
	prvTaskExitError();
 8002b30:	f7ff ff20 	bl	8002974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	410fc271 	.word	0x410fc271
 8002b48:	410fc270 	.word	0x410fc270
 8002b4c:	e000e400 	.word	0xe000e400
 8002b50:	200003b8 	.word	0x200003b8
 8002b54:	200003bc 	.word	0x200003bc
 8002b58:	e000ed20 	.word	0xe000ed20
 8002b5c:	20000010 	.word	0x20000010
 8002b60:	e000ef34 	.word	0xe000ef34

08002b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	607b      	str	r3, [r7, #4]
}
 8002b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <vPortEnterCritical+0x58>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <vPortEnterCritical+0x58>)
 8002b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <vPortEnterCritical+0x58>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10f      	bne.n	8002bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <vPortEnterCritical+0x5c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	603b      	str	r3, [r7, #0]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <vPortEnterCritical+0x4a>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000010 	.word	0x20000010
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <vPortExitCritical+0x50>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <vPortExitCritical+0x24>
	__asm volatile
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	607b      	str	r3, [r7, #4]
}
 8002be4:	bf00      	nop
 8002be6:	e7fe      	b.n	8002be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <vPortExitCritical+0x50>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <vPortExitCritical+0x50>)
 8002bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <vPortExitCritical+0x50>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <vPortExitCritical+0x42>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000010 	.word	0x20000010
	...

08002c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c20:	f3ef 8009 	mrs	r0, PSP
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <pxCurrentTCBConst>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	f01e 0f10 	tst.w	lr, #16
 8002c30:	bf08      	it	eq
 8002c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c44:	f380 8811 	msr	BASEPRI, r0
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f7ff fca6 	bl	80025a0 <vTaskSwitchContext>
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f380 8811 	msr	BASEPRI, r0
 8002c5c:	bc09      	pop	{r0, r3}
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	6808      	ldr	r0, [r1, #0]
 8002c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c66:	f01e 0f10 	tst.w	lr, #16
 8002c6a:	bf08      	it	eq
 8002c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c70:	f380 8809 	msr	PSP, r0
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	f3af 8000 	nop.w

08002c80 <pxCurrentTCBConst>:
 8002c80:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop

08002c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	607b      	str	r3, [r7, #4]
}
 8002ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ca2:	f7ff fbc5 	bl	8002430 <xTaskIncrementTick>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <xPortSysTickHandler+0x40>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f383 8811 	msr	BASEPRI, r3
}
 8002cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <vPortSetupTimerInterrupt+0x34>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <vPortSetupTimerInterrupt+0x38>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <vPortSetupTimerInterrupt+0x3c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <vPortSetupTimerInterrupt+0x40>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <vPortSetupTimerInterrupt+0x44>)
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <vPortSetupTimerInterrupt+0x34>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010
 8002d04:	e000e018 	.word	0xe000e018
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	10624dd3 	.word	0x10624dd3
 8002d10:	e000e014 	.word	0xe000e014

08002d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d24 <vPortEnableVFP+0x10>
 8002d18:	6801      	ldr	r1, [r0, #0]
 8002d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d1e:	6001      	str	r1, [r0, #0]
 8002d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002d22:	bf00      	nop
 8002d24:	e000ed88 	.word	0xe000ed88

08002d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d34:	f7ff fad2 	bl	80022dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d38:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <pvPortMalloc+0x180>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d40:	f000 f920 	bl	8002f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <pvPortMalloc+0x184>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8093 	bne.w	8002e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01d      	beq.n	8002d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002d58:	2208      	movs	r2, #8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d014      	beq.n	8002d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f023 0307 	bic.w	r3, r3, #7
 8002d70:	3308      	adds	r3, #8
 8002d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <pvPortMalloc+0x6c>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	617b      	str	r3, [r7, #20]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d06e      	beq.n	8002e78 <pvPortMalloc+0x150>
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <pvPortMalloc+0x188>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d869      	bhi.n	8002e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <pvPortMalloc+0x18c>)
 8002da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <pvPortMalloc+0x18c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dae:	e004      	b.n	8002dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d903      	bls.n	8002dcc <pvPortMalloc+0xa4>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f1      	bne.n	8002db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <pvPortMalloc+0x180>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d050      	beq.n	8002e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	4413      	add	r3, r2
 8002dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	2308      	movs	r3, #8
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d91f      	bls.n	8002e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <pvPortMalloc+0xf8>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	613b      	str	r3, [r7, #16]
}
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e32:	69b8      	ldr	r0, [r7, #24]
 8002e34:	f000 f908 	bl	8003048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <pvPortMalloc+0x190>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d203      	bcs.n	8002e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <pvPortMalloc+0x190>)
 8002e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <pvPortMalloc+0x184>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <pvPortMalloc+0x194>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <pvPortMalloc+0x194>)
 8002e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e78:	f7ff fa3e 	bl	80022f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <pvPortMalloc+0x174>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	60fb      	str	r3, [r7, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <pvPortMalloc+0x172>
	return pvReturn;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20003fc8 	.word	0x20003fc8
 8002eac:	20003fdc 	.word	0x20003fdc
 8002eb0:	20003fcc 	.word	0x20003fcc
 8002eb4:	20003fc0 	.word	0x20003fc0
 8002eb8:	20003fd0 	.word	0x20003fd0
 8002ebc:	20003fd4 	.word	0x20003fd4

08002ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04d      	beq.n	8002f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	425b      	negs	r3, r3
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4413      	add	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <vPortFree+0xb8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <vPortFree+0x44>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60fb      	str	r3, [r7, #12]
}
 8002f00:	bf00      	nop
 8002f02:	e7fe      	b.n	8002f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <vPortFree+0x62>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	60bb      	str	r3, [r7, #8]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <vPortFree+0xb8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01e      	beq.n	8002f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11a      	bne.n	8002f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <vPortFree+0xb8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f48:	f7ff f9c8 	bl	80022dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <vPortFree+0xbc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <vPortFree+0xbc>)
 8002f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f5a:	6938      	ldr	r0, [r7, #16]
 8002f5c:	f000 f874 	bl	8003048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <vPortFree+0xc0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <vPortFree+0xc0>)
 8002f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002f6a:	f7ff f9c5 	bl	80022f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20003fdc 	.word	0x20003fdc
 8002f7c:	20003fcc 	.word	0x20003fcc
 8002f80:	20003fd8 	.word	0x20003fd8

08002f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <prvHeapInit+0xac>)
 8002f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <prvHeapInit+0xac>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <prvHeapInit+0xb0>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <prvHeapInit+0xb0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <prvHeapInit+0xb4>)
 8002fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <prvHeapInit+0xb4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <prvHeapInit+0xb4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <prvHeapInit+0xb4>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <prvHeapInit+0xb8>)
 8003012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <prvHeapInit+0xbc>)
 800301a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <prvHeapInit+0xc0>)
 800301e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200003c0 	.word	0x200003c0
 8003034:	20003fc0 	.word	0x20003fc0
 8003038:	20003fc8 	.word	0x20003fc8
 800303c:	20003fd0 	.word	0x20003fd0
 8003040:	20003fcc 	.word	0x20003fcc
 8003044:	20003fdc 	.word	0x20003fdc

08003048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <prvInsertBlockIntoFreeList+0xac>)
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e002      	b.n	800305c <prvInsertBlockIntoFreeList+0x14>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d8f7      	bhi.n	8003056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d108      	bne.n	800308a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	441a      	add	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d118      	bne.n	80030d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <prvInsertBlockIntoFreeList+0xb0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d00d      	beq.n	80030c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e008      	b.n	80030d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <prvInsertBlockIntoFreeList+0xb0>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e003      	b.n	80030d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d002      	beq.n	80030e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20003fc0 	.word	0x20003fc0
 80030f8:	20003fc8 	.word	0x20003fc8

080030fc <__libc_init_array>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	4d0d      	ldr	r5, [pc, #52]	; (8003134 <__libc_init_array+0x38>)
 8003100:	4c0d      	ldr	r4, [pc, #52]	; (8003138 <__libc_init_array+0x3c>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	2600      	movs	r6, #0
 8003108:	42a6      	cmp	r6, r4
 800310a:	d109      	bne.n	8003120 <__libc_init_array+0x24>
 800310c:	4d0b      	ldr	r5, [pc, #44]	; (800313c <__libc_init_array+0x40>)
 800310e:	4c0c      	ldr	r4, [pc, #48]	; (8003140 <__libc_init_array+0x44>)
 8003110:	f000 f820 	bl	8003154 <_init>
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	2600      	movs	r6, #0
 800311a:	42a6      	cmp	r6, r4
 800311c:	d105      	bne.n	800312a <__libc_init_array+0x2e>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f855 3b04 	ldr.w	r3, [r5], #4
 8003124:	4798      	blx	r3
 8003126:	3601      	adds	r6, #1
 8003128:	e7ee      	b.n	8003108 <__libc_init_array+0xc>
 800312a:	f855 3b04 	ldr.w	r3, [r5], #4
 800312e:	4798      	blx	r3
 8003130:	3601      	adds	r6, #1
 8003132:	e7f2      	b.n	800311a <__libc_init_array+0x1e>
 8003134:	080031cc 	.word	0x080031cc
 8003138:	080031cc 	.word	0x080031cc
 800313c:	080031cc 	.word	0x080031cc
 8003140:	080031d0 	.word	0x080031d0

08003144 <memset>:
 8003144:	4402      	add	r2, r0
 8003146:	4603      	mov	r3, r0
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <memset+0xa>
 800314c:	4770      	bx	lr
 800314e:	f803 1b01 	strb.w	r1, [r3], #1
 8003152:	e7f9      	b.n	8003148 <memset+0x4>

08003154 <_init>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr

08003160 <_fini>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr
